MAE <- mean(abs(errors))
RMSE <- sqrt(mean(errors^2))
# Store MAE and RMSE for the current horizon
MAEs[[as.character(h)]] <- MAE
RMSEs[[as.character(h)]] <- RMSE
}
return(list(MAEs = MAEs, RMSEs = RMSEs))
}
# Define horizons for cross-validation
horizons <- c(1, 6, 12)
# Perform cross-validation for VAR model for each horizon
cv_results_var <- perform_cv_var(horizons, bussal_diff, businv_diff)
# Combine the two stationary time series into a single data frame
data_df_diff <- data.frame(bussal_diff, businv_diff)
# Define the number of observations for test set
test_length <- 12  # Assuming the last 12 observations as test set
# Create train and test sets
train_data <- data_df_diff[1:(nrow(data_df_diff) - test_length), ]
test_data <- data_df_diff[(nrow(data_df_diff) - test_length + 1):nrow(data_df_diff), ]
# Specify the VAR model with businv as exogenous variable
var_model <- VAR(train_data, p = 2, type = "const", exogen = data.frame(businv_diff))
# Combine the two stationary time series into a single data frame
data_df_diff <- data.frame(bussal_diff, businv_diff)
# Define the number of observations for test set
test_length <- 12  # Assuming the last 12 observations as test set
# Create train and test sets
train_data <- data_df_diff[1:(nrow(data_df_diff) - test_length), ]
test_data <- data_df_diff[(nrow(data_df_diff) - test_length + 1):nrow(data_df_diff), ]
# Extract exogenous variable for training data
exog_train <- train_data$businv_diff
# Specify the VAR model with businv as exogenous variable
var_model <- VAR(train_data[, "bussal_diff", drop = FALSE], p = 2, type = "const", exogen = exog_train)
# Combine the two stationary time series into a single data frame
data_df_diff <- data.frame(bussal_diff, businv_diff)
horizons <- c(1, 5, 10)
static_rmse_values <- c(2.5, 3.2, 4.1)
rmse_values <- numeric(length(horizons))
for (h in seq_along(horizons)) {
train_end <- nrow(data_df_diff) - horizons[h]
train_data <- data_df_diff[1:train_end, ]
test_data <- data_df_diff[(train_end + 1):(train_end + horizons[h]), ]
# Specify the VAR model with businv as exogenous variable
var_model <- VAR(train_data, p = 2, type = "const", exogen = data.frame(businv_diff[1:train_end, ]))
# Forecasting for test set
forecast <- predict(var_model, n.ahead = horizons[h], dumvar = test_data$businv_diff)
# Extract forecasted values
forecast_diff <- forecast$fcst$bussal_diff
# Perform inverse differencing to obtain the forecasted values in the original scale
final_forecast <- forecast_diff + tail(data_df_diff$bussal_diff, 1)
# Calculate RMSE for the current horizon
rmse_values[h] <- rmse(final_forecast, test_data$bussal_diff)
}
# Combine the two stationary time series into a single data frame
data_df_diff <- data.frame(bussal_diff, businv_diff)
horizons <- c(1, 5, 10)
static_rmse_values <- c(2.5, 3.2, 4.1)
rmse_values <- numeric(length(horizons))
for (h in seq_along(horizons)) {
train_end <- nrow(data_df_diff) - horizons[h]
train_data <- data_df_diff[1:train_end, ]
test_data <- data_df_diff[(train_end + 1):(train_end + horizons[h]), ]
# Specify the VAR model with businv as exogenous variable
var_model <- VAR(train_data, p = 2, type = "const", exogen = train_data[, "businv_diff", drop = FALSE])
# Forecasting for test set
forecast <- predict(var_model, n.ahead = horizons[h], dumvar = tail(data_df_diff$businv_diff, 1))
# Extract forecasted values
forecast_diff <- forecast$fcst$bussal_diff
# Perform inverse differencing to obtain the forecasted values in the original scale
final_forecast <- forecast_diff + tail(data_df_diff$bussal_diff, 1)
# Calculate RMSE for the current horizon
rmse_values[h] <- rmse(final_forecast, test_data$bussal_diff)
}
# Combine the two stationary time series into a single data frame
data_df_diff <- data.frame(bussal_diff, businv_diff)
horizons <- c(1, 5, 10)
static_rmse_values <- c(2.5, 3.2, 4.1)
rmse_values <- numeric(length(horizons))
for (h in seq_along(horizons)) {
train_end <- nrow(data_df_diff) - horizons[h]
train_data <- data_df_diff[1:train_end, ]
test_data <- data_df_diff[(train_end + 1):(train_end + horizons[h]), ]
# Specify the VAR model with businv as exogenous variable
var_model <- VAR(train_data, p = 2, type = "const", exogen = train_data[, "businv_diff", drop = FALSE])
# Forecasting for test set
forecast <- predict(var_model, n.ahead = horizons[h], exogen = tail(data_df_diff$businv_diff, 1))
# Extract forecasted values
forecast_diff <- forecast$fcst$bussal_diff
# Perform inverse differencing to obtain the forecasted values in the original scale
final_forecast <- forecast_diff + tail(data_df_diff$bussal_diff, 1)
# Calculate RMSE for the current horizon
rmse_values[h] <- rmse(final_forecast, test_data$bussal_diff)
}
# Combine the two stationary time series into a single data frame
data_df_diff <- data.frame(bussal_diff, businv_diff)
horizons <- c(1, 5, 10)
static_rmse_values <- c(2.5, 3.2, 4.1)
rmse_values <- numeric(length(horizons))
for (h in seq_along(horizons)) {
train_end <- nrow(data_df_diff) - horizons[h]
train_data <- data_df_diff[1:train_end, ]
test_data <- data_df_diff[(train_end + 1):(train_end + horizons[h]), ]
# Specify the VAR model with businv as exogenous variable
var_model <- VAR(train_data, p = 2, type = "const", exogen = train_data[, "businv_diff", drop = FALSE])
# Forecasting for test set
forecast <- predict(var_model, n.ahead = horizons[h], dumvar = tail(data_df_diff$businv_diff, 1))
# Extract forecasted values
forecast_diff <- forecast$fcst$bussal_diff
# Perform inverse differencing to obtain the forecasted values in the original scale
final_forecast <- forecast_diff + tail(data_df_diff$bussal_diff, 1)
# Calculate RMSE for the current horizon
rmse_values[h] <- rmse(final_forecast, test_data$bussal_diff)
}
# Combine the two stationary time series into a single data frame
data_df_diff <- data.frame(bussal_diff, businv_diff)
horizons <- c(1, 5, 10)
static_rmse_values <- c(2.5, 3.2, 4.1)
rmse_values <- numeric(length(horizons))
for (h in seq_along(horizons)) {
train_end <- nrow(data_df_diff) - horizons[h]
train_data <- data_df_diff[1:train_end, ]
test_data <- data_df_diff[(train_end + 1):(train_end + horizons[h]), ]
# Specify the VAR model with businv as exogenous variable
var_model <- VAR(train_data, p = 2, type = "const", exogen = train_data[, "businv_diff", drop = FALSE])
exog_forecast <- tail(data_df_diff$businv_diff, horizons[h])
# Forecasting for test set
forecast <- predict(var_model, n.ahead = horizons[h], dumvar = tail(data_df_diff$businv_diff, 1))
# Extract forecasted values
forecast_diff <- forecast$fcst$bussal_diff
# Perform inverse differencing to obtain the forecasted values in the original scale
final_forecast <- forecast_diff + tail(data_df_diff$bussal_diff, 1)
# Calculate RMSE for the current horizon
rmse_values[h] <- rmse(final_forecast, test_data$bussal_diff)
}
# Define horizon
horizon <- 12
# Store MAE and RMSE for each model
mae_values <- numeric(3)
rmse_values <- numeric(3)
# Cross-validation for RegARIMA model
regarima_mae <- function(train_data, test_data, xreg_train, xreg_test) {
regarima_model <- auto.arima(train_data, xreg = xreg_train)
regarima_forecast_diff <- forecast(regarima_model, xreg = xreg_test, h = length(test_data))
forecast_diff_regarima <- regarima_forecast_diff$mean
forecasted_value_regarima <- forecast_diff_regarima + tail(train_data, 1)
mae(forecasted_value_regarima, test_data)
}
# Cross-validation for TSLM model
tslm_mae <- function(train_data, test_data, covariate_train, covariate_test) {
tslm_model <- tslm(train_data ~ covariate_train)
forecast_tslm <- forecast(tslm_model, newdata = data.frame(covariate_test), h = length(test_data))
forecasted_value_tslm <- forecast_tslm$mean
mae(forecasted_value_tslm, test_data)
}
# Cross-validation for VAR model
var_mae <- function(train_data, test_data, exog_train, exog_test) {
var_model <- VAR(train_data, p = 2, type = "const", exogen = exog_train)
forecast <- predict(var_model, n.ahead = length(test_data), dumvar = exog_test)
forecast_diff <- forecast$fcst$bussal_diff
final_forecast <- forecast_diff + tail(train_data$bussal_diff, 1)
mae(final_forecast, test_data$bussal_diff)
}
# Perform cross-validation
for (i in 1:horizon) {
train_end <- length(bussal_ts) - horizon + i - 1
train_data <- bussal_ts[1:train_end]
test_data <- bussal_ts[(train_end + 1):(train_end + 1)]
xreg_train <- head(businv_diff, train_end)
xreg_test <- tail(businv_diff, 1)
# Calculate MAE for each model
mae_values[1] <- regarima_mae(train_data, test_data, xreg_train, xreg_test)
mae_values[2] <- tslm_mae(train_data, test_data, xreg_train, xreg_test)
mae_values[3] <- var_mae(train_data, test_data, data.frame(businv_diff = xreg_train), data.frame(businv_diff = xreg_test))
}
# Store MAE and RMSE for each model
mae_values <- numeric(3)
rmse_values <- numeric(3)
# Cross-validation for RegARIMA model
regarima_mae <- function(train_data, test_data, xreg_train, xreg_test) {
regarima_model <- auto.arima(train_data, xreg = xreg_train)
regarima_forecast_diff <- forecast(regarima_model, xreg = xreg_test, h = length(test_data))
forecast_diff_regarima <- regarima_forecast_diff$mean
forecasted_value_regarima <- forecast_diff_regarima + tail(train_data, 1)
mae(forecasted_value_regarima, test_data)
}
# Cross-validation for TSLM model
tslm_mae <- function(train_data, test_data, covariate_train, covariate_test) {
tslm_model <- lm(train_data ~ covariate_train)
forecast_tslm <- forecast(tslm_model, newdata = data.frame(covariate_test), h = length(test_data))
forecasted_value_tslm <- forecast_tslm$mean
mae(forecasted_value_tslm, test_data)
}
# Cross-validation for VAR model
var_mae <- function(train_data, test_data, exog_train, exog_test) {
var_model <- VAR(train_data, p = 2, type = "const", exogen = exog_train)
forecast <- predict(var_model, n.ahead = length(test_data), dumvar = exog_test)
forecast_diff <- forecast$fcst$bussal_diff
final_forecast <- forecast_diff + tail(train_data$bussal_diff, 1)
mae(final_forecast, test_data$bussal_diff)
}
# Perform cross-validation
for (i in 1:horizon) {
train_end <- length(bussal_ts) - horizon + i - 1
train_data <- bussal_ts[1:train_end]
test_data <- bussal_ts[(train_end + 1):(train_end + 1)]
xreg_train <- head(businv_diff, train_end)
xreg_test <- tail(businv_diff, 1)
# Calculate MAE for each model
mae_values[1] <- regarima_mae(train_data, test_data, xreg_train, xreg_test)
mae_values[2] <- tslm_mae(train_data, test_data, xreg_train, xreg_test)
mae_values[3] <- var_mae(train_data, test_data, data.frame(businv_diff = xreg_train), data.frame(businv_diff = xreg_test))
}
# Cross-validation for TSLM model
tslm_mae <- function(train_data, test_data, covariate_train, covariate_test) {
tslm_model <- tslm(train_data ~ covariate_train)
# Create a named data frame for new data
newdata <- data.frame(covariate_train = covariate_test)
# Forecast using the tslm model
forecast_tslm <- forecast(tslm_model, newdata = newdata)
# Extract the forecasted values
forecasted_value_tslm <- forecast_tslm$mean
# Calculate MAE
mae(forecasted_value_tslm, test_data)
}
# Define horizon
horizon <- 12
# Store MAE and RMSE for each model
mae_values <- numeric(3)
rmse_values <- numeric(3)
# Cross-validation for RegARIMA model
regarima_mae <- function(train_data, test_data, xreg_train, xreg_test) {
regarima_model <- auto.arima(train_data, xreg = xreg_train)
regarima_forecast_diff <- forecast(regarima_model, xreg = xreg_test, h = length(test_data))
forecast_diff_regarima <- regarima_forecast_diff$mean
forecasted_value_regarima <- forecast_diff_regarima + tail(train_data, 1)
mae(forecasted_value_regarima, test_data)
}
# Cross-validation for TSLM model
# Cross-validation for TSLM model
tslm_mae <- function(train_data, test_data, covariate_train, covariate_test) {
tslm_model <- tslm(train_data ~ covariate_train)
# Create a named data frame for new data
newdata <- data.frame(covariate_train = covariate_test)
# Forecast using the tslm model
forecast_tslm <- forecast(tslm_model, newdata = newdata)
# Extract the forecasted values
forecasted_value_tslm <- forecast_tslm$mean
# Calculate MAE
mae(forecasted_value_tslm, test_data)
}
# Cross-validation for VAR model
var_mae <- function(train_data, test_data, exog_train, exog_test) {
var_model <- VAR(train_data, p = 2, type = "const", exogen = exog_train)
forecast <- predict(var_model, n.ahead = length(test_data), dumvar = exog_test)
forecast_diff <- forecast$fcst$bussal_diff
final_forecast <- forecast_diff + tail(train_data$bussal_diff, 1)
mae(final_forecast, test_data$bussal_diff)
}
# Perform cross-validation
for (i in 1:horizon) {
train_end <- length(bussal_ts) - horizon + i - 1
train_data <- bussal_ts[1:train_end]
test_data <- bussal_ts[(train_end + 1):(train_end + 1)]
xreg_train <- head(businv_diff, train_end)
xreg_test <- tail(businv_diff, 1)
# Calculate MAE for each model
mae_values[1] <- regarima_mae(train_data, test_data, xreg_train, xreg_test)
mae_values[2] <- tslm_mae(train_data, test_data, xreg_train, xreg_test)
mae_values[3] <- var_mae(train_data, test_data, data.frame(businv_diff = xreg_train), data.frame(businv_diff = xreg_test))
}
# Store MAE and RMSE for each model
mae_values <- numeric(3)
rmse_values <- numeric(3)
# Cross-validation for RegARIMA model
regarima_mae <- function(train_data, test_data, xreg_train, xreg_test) {
regarima_model <- auto.arima(train_data, xreg = xreg_train)
regarima_forecast_diff <- forecast(regarima_model, xreg = xreg_test, h = length(test_data))
forecast_diff_regarima <- regarima_forecast_diff$mean
forecasted_value_regarima <- forecast_diff_regarima + tail(train_data, 1)
mae(forecasted_value_regarima, test_data)
}
# Cross-validation for TSLM model
# Cross-validation for TSLM model
tslm_mae <- function(train_data, test_data, covariate_train, covariate_test) {
tslm_model <- lm(train_data ~ covariate_train)
# Create a named data frame for new data
newdata <- data.frame(covariate_train = covariate_test)
# Forecast using the tslm model
forecast_tslm <- forecast(tslm_model, newdata = newdata)
# Extract the forecasted values
forecasted_value_tslm <- forecast_tslm$mean
# Calculate MAE
mae(forecasted_value_tslm, test_data)
}
# Cross-validation for VAR model
var_mae <- function(train_data, test_data, exog_train, exog_test) {
var_model <- VAR(train_data, p = 2, type = "const", exogen = exog_train)
forecast <- predict(var_model, n.ahead = length(test_data), dumvar = exog_test)
forecast_diff <- forecast$fcst$bussal_diff
final_forecast <- forecast_diff + tail(train_data$bussal_diff, 1)
mae(final_forecast, test_data$bussal_diff)
}
# Perform cross-validation
for (i in 1:horizon) {
train_end <- length(bussal_ts) - horizon + i - 1
train_data <- bussal_ts[1:train_end]
test_data <- bussal_ts[(train_end + 1):(train_end + 1)]
xreg_train <- head(businv_diff, train_end)
xreg_test <- tail(businv_diff, 1)
# Calculate MAE for each model
mae_values[1] <- regarima_mae(train_data, test_data, xreg_train, xreg_test)
mae_values[2] <- tslm_mae(train_data, test_data, xreg_train, xreg_test)
mae_values[3] <- var_mae(train_data, test_data, data.frame(businv_diff = xreg_train), data.frame(businv_diff = xreg_test))
}
# Define a lagged version of bussal_diff
bussal_diff_lag <- lag(data_df_diff$bussal_diff, -1)
rlang::last_trace()
# Define a lagged version of bussal_diff using the stats::lag function
bussal_diff_lag <- stats::lag(data_df_diff$bussal_diff, -1)
# Combine the two stationary time series into a single data frame with the lagged variable
data_df_diff <- cbind(data_df_diff, bussal_diff_lag)
# Cross-validation for VAR model
var_mae <- function(train_data, test_data, exog_train, exog_test) {
var_model <- VAR(train_data, p = 2, type = "const", exogen = exog_train)
forecast <- predict(var_model, n.ahead = length(test_data), dumvar = exog_test)
forecast_diff <- forecast$fcst$bussal_diff
final_forecast <- forecast_diff + tail(train_data$bussal_diff, 1)
mae(final_forecast, test_data$bussal_diff)
}
# Perform cross-validation
for (i in 1:horizon) {
train_end <- length(bussal_ts) - horizon + i - 1
train_data <- data_df_diff[1:train_end, ]
test_data <- data_df_diff[(train_end + 1):(train_end + 1), ]
exog_train <- data.frame(businv_diff = head(businv_diff, train_end))
exog_test <- data.frame(businv_diff = tail(businv_diff, 1))
# Calculate MAE for each model
mae_values[3] <- var_mae(train_data, test_data, exog_train, exog_test)
}
# Combine the two stationary time series into a single data frame
data_df_diff <- data.frame(bussal_diff, businv_diff)
# Define horizon values
horizons <- c(1, 6, 12)
# Initialize a vector to store RMSE values for each horizon
rmse_values <- numeric(length(horizons))
# Loop over different horizons
for (h in horizons) {
# Define the end index for training data
train_end <- nrow(data_df_diff) - h
# Extract training and testing data
train_data <- data_df_diff[1:train_end, ]
test_data <- data_df_diff[(train_end + 1):(train_end + 1), ]
# Fit VAR model on training data
var_model <- VAR(train_data, p = 2, type = "const", exogen = data.frame(businv_diff[1:train_end, ]))
# Forecast for the next horizon
forecast <- predict(var_model, n.ahead = h, dumvar = tail(data.frame(businv_diff), 1))
# Extract forecasted values
forecast_diff <- forecast$fcst$bussal_diff
# Perform inverse differencing to obtain forecasted values in the original scale
final_forecast <- forecast_diff + tail(data_df_diff$bussal_diff, 1)
# Extract actual values for the forecast horizon
actual <- tail(data_df_diff$bussal_diff, h)
# Calculate RMSE for the current horizon
rmse_values[which(horizons == h)] <- rmse(final_forecast, actual)
}
# Loop over different horizons
for (h in horizons) {
# Define the end index for training data
train_end <- nrow(data_df_diff) - h
# Extract training and testing data
train_data <- data_df_diff[1:train_end]
test_data <- data_df_diff[(train_end + 1):(train_end + 1), ]
# Fit VAR model on training data
var_model <- VAR(train_data, p = 2, type = "const", exogen = data.frame(businv_diff[1:train_end, ]))
# Forecast for the next horizon
forecast <- predict(var_model, n.ahead = h, dumvar = tail(data.frame(businv_diff), 1))
# Extract forecasted values
forecast_diff <- forecast$fcst$bussal_diff
# Perform inverse differencing to obtain forecasted values in the original scale
final_forecast <- forecast_diff + tail(data_df_diff$bussal_diff, 1)
# Extract actual values for the forecast horizon
actual <- tail(data_df_diff$bussal_diff, h)
# Calculate RMSE for the current horizon
rmse_values[which(horizons == h)] <- rmse(final_forecast, actual)
}
# Combine the two stationary time series into a single data frame
data_df_diff <- data.frame(bussal_diff, businv_diff)
# Define horizon values
horizons <- c(1, 6, 12)
# Initialize a vector to store RMSE values for each horizon
rmse_values <- numeric(length(horizons))
# Loop over different horizons
for (h in horizons) {
# Define the end index for training data
train_end <- nrow(data_df_diff) - h
# Extract training and testing data
train_data <- data_df_diff[1:train_end]
#test_data <- data_df_diff[(train_end + 1):(train_end + 1), ]
# Fit VAR model on training data
var_model <- VAR(train_data, p = 2, type = "const", exogen = data.frame(businv_diff[1:train_end, ]))
# Forecast for the next horizon
forecast <- predict(var_model, n.ahead = h, dumvar = tail(data.frame(businv_diff), 1))
# Extract forecasted values
forecast_diff <- forecast$fcst$bussal_diff
# Perform inverse differencing to obtain forecasted values in the original scale
final_forecast <- forecast_diff + tail(data_df_diff$bussal_diff, 1)
# Extract actual values for the forecast horizon
actual <- tail(data_df_diff$bussal_diff, h)
# Calculate RMSE for the current horizon
rmse_values[which(horizons == h)] <- rmse(final_forecast, actual)
}
# Loop over different horizons
for (h in horizons) {
# Define the end index for training data
train_end <- nrow(data_df_diff) - h
# Extract training and testing data
train_data <- data_df_diff[1:train_end]
#test_data <- data_df_diff[(train_end + 1):(train_end + 1), ]
# Fit VAR model on training data
var_model <- VAR(train_data, p = 2, type = "const", exogen = data.frame(businv_diff[1:train_end]))
# Forecast for the next horizon
forecast <- predict(var_model, n.ahead = h, dumvar = tail(data.frame(businv_diff), 1))
# Extract forecasted values
forecast_diff <- forecast$fcst$bussal_diff
# Perform inverse differencing to obtain forecasted values in the original scale
final_forecast <- forecast_diff + tail(data_df_diff$bussal_diff, 1)
# Extract actual values for the forecast horizon
actual <- tail(data_df_diff$bussal_diff, h)
# Calculate RMSE for the current horizon
rmse_values[which(horizons == h)] <- rmse(final_forecast, actual)
}
# Loop over different horizons
for (h in horizons) {
# Define the end index for training data
train_end <- nrow(data_df_diff) - h
# Extract training and testing data
train_data <- data_df_diff[1:train_end]
#test_data <- data_df_diff[(train_end + 1):(train_end + 1), ]
# Fit VAR model on training data
var_model <- VAR(train_data, p = 2, type = "const")
# Forecast for the next horizon
forecast <- predict(var_model, n.ahead = h, dumvar = tail(data.frame(businv_diff), 1))
# Extract forecasted values
forecast_diff <- forecast$fcst$bussal_diff
# Perform inverse differencing to obtain forecasted values in the original scale
final_forecast <- forecast_diff + tail(data_df_diff$bussal_diff, 1)
# Extract actual values for the forecast horizon
actual <- tail(data_df_diff$bussal_diff, h)
# Calculate RMSE for the current horizon
rmse_values[which(horizons == h)] <- rmse(final_forecast, actual)
}
# Loop over different horizons
for (h in horizons) {
# Define the end index for training data
train_end <- nrow(data_df_diff) - h
# Extract training and testing data
train_data <- data_df_diff[1:train_end]
#test_data <- data_df_diff[(train_end + 1):(train_end + 1), ]
# Fit VAR model on training data
var_model <- VAR(train_data)
# Forecast for the next horizon
forecast <- predict(var_model, n.ahead = h, dumvar = tail(data.frame(businv_diff), 1))
# Extract forecasted values
forecast_diff <- forecast$fcst$bussal_diff
# Perform inverse differencing to obtain forecasted values in the original scale
final_forecast <- forecast_diff + tail(data_df_diff$bussal_diff, 1)
# Extract actual values for the forecast horizon
actual <- tail(data_df_diff$bussal_diff, h)
# Calculate RMSE for the current horizon
rmse_values[which(horizons == h)] <- rmse(final_forecast, actual)
}
# Loop over different horizons
for (h in horizons) {
# Define the end index for training data
train_end <- nrow(data_df_diff) - h
# Extract training and testing data
train_data <- data_df_diff[1:train_end]
#test_data <- data_df_diff[(train_end + 1):(train_end + 1), ]
# Fit VAR model on training data
var_model <- VAR(train_data)
# Forecast for the next horizon
forecast <- predict(var_model, n.ahead = h)
# Extract forecasted values
forecast_diff <- forecast$fcst$bussal_diff
# Perform inverse differencing to obtain forecasted values in the original scale
final_forecast <- forecast_diff + tail(data_df_diff$bussal_diff, 1)
# Extract actual values for the forecast horizon
actual <- tail(data_df_diff$bussal_diff, h)
# Calculate RMSE for the current horizon
rmse_values[which(horizons == h)] <- rmse(final_forecast, actual)
}
# Loop over different horizons
for (h in horizons) {
# Define the end index for training data
train_end <- nrow(data_df_diff) - h
# Extract training and testing data
train_data <- data_df_diff[1:train_end]
#test_data <- data_df_diff[(train_end + 1):(train_end + 1), ]
# Fit VAR model on training data
var_model <- VAR(train_data)
# Forecast for the next horizon
forecast <- predict(var_model, n.ahead = h)
# # Extract forecasted values
# forecast_diff <- forecast$fcst$bussal_diff
#
# # Perform inverse differencing to obtain forecasted values in the original scale
# final_forecast <- forecast_diff + tail(data_df_diff$bussal_diff, 1)
#
# Extract actual values for the forecast horizon
actual <- tail(data_df_diff$bussal_diff, h)
# Calculate RMSE for the current horizon
rmse_values[which(horizons == h)] <- rmse(final_forecast, actual)
}
